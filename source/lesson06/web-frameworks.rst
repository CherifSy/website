.. _web_frameworks:

Web Frameworks
==============


What is a Framework?
--------------------

    ... an abstraction in which software providing generic functionality can be
    selectively changed by additional user-written code, thus providing
    application-specific software.


.. figure:: /static/sail_boat.png
    :align: right
    :width: 300pt
    :alt: sail boat

Set of tools for producing a specific type of software (website, video game,
etc) which can be extended. Tend to dictate the structure of your program.

Different from a library in that you *use* a library, and you *extend* a
framework.


Why use a Framework?
--------------------

* When you want to build a big project.
* When you don't need to re-invent the wheel.
* URL Routing.
* Template Engines.

.. figure:: /static/why.gif
    :align: center
    :width: 200pt
    :alt: John Stewart -- Why?

Static vs Dynamic Sites
-----------------------

    A static web page [...] is a web page that is delivered to the user exactly
    as stored, in contrast to dynamic web pages which are generated by a web
    application.

=============== ========================
Static          Dynamic
=============== ========================
Blog            Webapps
Docs            Search Engines
These Slides    Anything with an Account
=============== ========================


Popular Web Frameworks
----------------------

.. figure:: /static/cakephp_logo.png
    :align: right
    :width: 400pt
    :alt: cake PHP logo

Java:

1. `Swing`_

PHP:

1. `CakePHP`_

.. _Swing: https://en.wikipedia.org/wiki/Swing_%28Java%29
.. _CakePHP: http://cakephp.org/


Python:
-------

1. `Django`_: High-level web framework, lots of features.
2. `Flask`_: Lightweight and easy to set up.

.. figure:: /static/flask.png
    :align: center
    :width: 400pt
    :alt: flask logo

.. _Django: https://www.djangoproject.com/
.. _Flask: http://flask.pocoo.org/


Ruby:
-----

1. `Rails`_: Very powerful, an industry standard.
2. `Sinatra`_: Sinatra is to Ruby as Flask is to Python.

.. figure:: /static/ruby_on_rails_logo.png
    :align: center
    :width: 200pt
    :alt: ruby on rails logo

.. _Rails: http://rubyonrails.org/
.. _Sinatra: http://www.sinatrarb.com/


Node.js:
--------

1. `Express`_: Sweet, simple, relies heavily on third-party middleware to get
   the basics done.
2. `Koa`_: Clean, small, and uses bleeding edge javascript features. Widely
   viewed as the successor to Express.
3. `Hapi`_: Web pages are configuration, not code.

.. figure:: /static/koajs_logo.png
    :align: center
    :width: 400pt
    :alt: koa js logo

.. _Express: http://expressjs.com/
.. _Koa: http://koajs.com/
.. _Hapi: http://hapijs.com/


URL Routing
-----------

#. Visit a webpage, ```http://github.com/devopsbootcamp``, now what happens?
#. URL routing involves looking at the URL, matching it to a pattern, and
   calling the appropriate function to render the page.
#. In Flask each function gets a special piece of ornamentation called a
   decorator.

.. code-block:: python

    @app.route('/<organization_name>')
    def render_organization_page():
        # do stuff


Who likes mad-libs?
-------------------

.. code-block:: text

    "_____________! he said ________ as he jumped into his convertible
      exclamation            adverb
    ______ and drove off with his __________ wife."
     noun                          adjective

.. figure:: /static/mad-libs.jpg
    :align: center
    :width: 300px
    :alt: Mad libs


Templating Engines
------------------
* How does facebook put your username on the page? It renders a template,
  mad-libs style, with your name as a variable.
* Different frameworks typically have different templating engines.

.. nextslide::

Jinja, typical pythonic templating engine.

.. code-block:: html

    {% for item in navigation %}
      <li><a href="{{ item.href }}">{{ item.caption }}</a></li>
    {% endfor %}

.. nextslide::

Liquid is the templating engine used by Jekyll.

.. code-block:: html

    {% for post in site.posts limit: 3 %}
      <li>
      <h3><a class="post-link" href="{{ post.url | prepend: site.baseurl }}">{{ post.title }}</a></h3>
      <span class="post-meta">{{ post.date | date: "%m.%e.%Y" }}</span><br>
      {% if post.fromurl %}
      <span class="post-meta">From: <a href="{{ post.fromurl }}">{{ post.from }}</a></span>
      {% else %}


Other Common Engines
--------------------

* eRuby: Embedded Ruby.

.. code-block:: html

    <!DOCTYPE html>
    <html>
      <body>
        <p>Hello, <%= user.first_name %>.</p>
      </body>
    </html>


* Jade does not use any HTML.

.. code-block:: text

    html(lang="en")
      body
        .p Hello #{ user.first_name }

.. code-block:: text

    <!DOCTYPE html>
    <html lang=en>
      <body>
        <p> Hello Dave </p>
      </body>
    </html>

Activity
--------

0. Login to your Linux Virtual Machine
#. Go to http://github.com/devopsbootcamp/tinsy-flask-app
#. Clone the Repository and follow the 'Installation/Usage' instructions.
#. Open ``script.py`` and follow the TODO instructions.

**Need more?**

Write your own Flask App: http://flask.pocoo.org/docs/0.10/quickstart/
